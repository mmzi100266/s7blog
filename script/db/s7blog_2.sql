-- --------------------------------------------------------
-- Host:                         127.0.0.1
-- Server version:               5.5.29 - MySQL Community Server (GPL)
-- Server OS:                    Win64
-- HeidiSQL version:             7.0.0.4053
-- Date/time:                    2013-01-12 22:12:35
-- --------------------------------------------------------

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET NAMES utf8 */;
/*!40014 SET FOREIGN_KEY_CHECKS=0 */;

-- Dumping database structure for s7blog
DROP DATABASE IF EXISTS `s7blog`;
CREATE DATABASE IF NOT EXISTS `s7blog` /*!40100 DEFAULT CHARACTER SET utf8 */;
USE `s7blog`;


-- Dumping structure for table s7blog.s7_blog
DROP TABLE IF EXISTS `s7_blog`;
CREATE TABLE IF NOT EXISTS `s7_blog` (
  `blogId` int(16) NOT NULL AUTO_INCREMENT,
  `title` varchar(50) NOT NULL,
  `body` longtext NOT NULL,
  `shortBody` varchar(255) NOT NULL,
  `createTime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updateTime` timestamp NULL DEFAULT NULL,
  `createUser` int(16) NOT NULL,
  PRIMARY KEY (`blogId`)
) ENGINE=InnoDB AUTO_INCREMENT=10 DEFAULT CHARSET=utf8;

-- Dumping data for table s7blog.s7_blog: ~6 rows (approximately)
DELETE FROM `s7_blog`;
/*!40000 ALTER TABLE `s7_blog` DISABLE KEYS */;
INSERT INTO `s7_blog` (`blogId`, `title`, `body`, `shortBody`, `createTime`, `updateTime`, `createUser`) VALUES
	(2, 'Mozilla Firefox 18 正式发布', '<ul>\r\n	<li>\r\n		NEW: Support for Retina Display on OS X 10.7 and up.\r\n	</li>\r\n	<li>\r\n		NEW: Preliminary support for WebRTC.\r\n	</li>\r\n	<li>\r\n		CHANGED: Experience better image quality with our new HTML scaling algorithm.\r\n	</li>\r\n	<li>\r\n		CHANGED: Performance improvements around tab switching.\r\n	</li>\r\n	<li>\r\n		DEVELOPER: <a href="https://developer.mozilla.org/en-US/docs/CSS/Using_CSS_flexible_boxes?redirectlocale=en-US&amp;redirectslug=CSS%2FFlexbox">CSS3 Flexbox</a> implemented.\r\n	</li>\r\n	<li>\r\n		DEVELOPER: Support for new DOM property window.devicePixelRatio.\r\n	</li>\r\n	<li>\r\n		DEVELOPER: Support for <a href="https://developer.mozilla.org/en-US/docs/CSS/@supports">@supports</a> added.\r\n	</li>\r\n	<li>\r\n		DEVELOPER: Improvement in startup time through smart handling of signed extension certificates.\r\n	</li>\r\n	<li>\r\n		HTML5: Support for W3C touch events impemented, taking the place of MozTouch events.\r\n	</li>\r\n	<li>\r\n		FIXED: Disable insecure content loading on HTTPS pages (<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=62178">62178</a>).\r\n	</li>\r\n	<li>\r\n		FIXED: Improved responsiveness for users on proxies (<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=769764">769764</a>).\r\n	</li>\r\n</ul>', 'NEW: Support for Retina Display on OS X 10.7 and up.   NEW: Preliminary support for WebRTC.   CHANGED: Experience better image quality with our new HTML scaling algorithm.   CHANGED: Performance im...', '2013-01-12 20:22:07', NULL, 1),
	(3, '第二篇', 'Spring 3 introduces several enhancements to its validation support.\r\n      First, the JSR-303 Bean Validation API is now fully supported. Second,\r\n      when used programatically, Spring\'s DataBinder can now validate objects as\r\n      well as bind to them. Third, Spring MVC now has support for declaratively\r\n      validating @Controller inputs.', 'Spring 3 introduces several enhancements to its validation support. First, the JSR-303 Bean Validation API is now fully supported. Second, when used programatically, Spring\'s DataBinder can now val...', '2013-01-12 21:44:29', NULL, 1),
	(4, '第三篇', '<div class="navheader">\r\n	<table width="100%">\r\n		<tbody>\r\n			<tr>\r\n				<th colspan="3" align="center">\r\n					7.&nbsp;Spring Expression Language (SpEL)\r\n				</th>\r\n			</tr>\r\n			<tr>\r\n				<td align="left" width="20%">\r\n					<a href="http://static.springsource.org/spring/docs/3.1.x/spring-framework-reference/html/validation.html">Prev</a>&nbsp;\r\n				</td>\r\n				<th align="center" width="60%">\r\n					Part&nbsp;III.&nbsp;Core Technologies\r\n				</th>\r\n				<td align="right" width="20%">\r\n					&nbsp;<a href="http://static.springsource.org/spring/docs/3.1.x/spring-framework-reference/html/aop.html">Next</a>\r\n				</td>\r\n			</tr>\r\n		</tbody>\r\n	</table>\r\n	<hr />\r\n</div>\r\n<div class="chapter">\r\n	<div class="titlepage">\r\n		<div>\r\n			<div>\r\n				<h2 class="title">\r\n					<a name="expressions"></a>7.&nbsp;Spring Expression Language (SpEL)\r\n				</h2>\r\n			</div>\r\n		</div>\r\n	</div>\r\n	<div class="section">\r\n		<div class="titlepage">\r\n			<div>\r\n				<div>\r\n					<h2 class="title">\r\n						<a name="expressions-intro"></a>7.1&nbsp;Introduction\r\n					</h2>\r\n				</div>\r\n			</div>\r\n		</div>\r\n		<p>\r\n			The Spring Expression Language (SpEL for short) is a powerful\r\n    expression language that supports querying and manipulating an object\r\n    graph at runtime. The language syntax is similar to Unified EL but offers\r\n    additional features, most notably method invocation and basic string\r\n    templating functionality.\r\n		</p>\r\n		<p>\r\n			While there are several other Java expression languages available,\r\n    OGNL, MVEL, and JBoss EL, to name a few, the Spring Expression Language\r\n    was created to provide the Spring community with a single well supported\r\n    expression language that can be used across all the products in the Spring\r\n    portfolio. Its language features are driven by the requirements of the\r\n    projects in the Spring portfolio, including tooling requirements for code\r\n    completion support within the eclipse based SpringSource Tool Suite. That\r\n    said, SpEL is based on a technology agnostic API allowing other\r\n    expression language implementations to be integrated should the need\r\n    arise.\r\n		</p>\r\n		<p>\r\n			While SpEL serves as the foundation for expression evaluation within\r\n    the Spring portfolio, it is not directly tied to Spring and can be used\r\n    independently. In order to be self contained, many of the examples in this\r\n    chapter use SpEL as if it were an independent expression language. This\r\n    requires creating a few bootstrapping infrastructure classes such as the\r\n    parser. Most Spring users will not need to deal with this infrastructure\r\n    and will instead only author expression strings for evaluation. An example\r\n    of this typical use is the integration of SpEL into creating XML or\r\n    annotated based bean definitions as shown in the section <a class="link" href="http://static.springsource.org/spring/docs/3.1.x/spring-framework-reference/html/expressions.html#expressions-beandef">Expression support for defining bean\r\n    definitions.</a>\r\n		</p>\r\n		<p>\r\n			This chapter covers the features of the expression language, its\r\n    API, and its language syntax. In several places an Inventor and Inventor\'s\r\n    Society class are used as the target objects for expression evaluation.\r\n    These class declarations and the data used to populate them are listed at\r\n    the end of the chapter.\r\n		</p>\r\n	</div>\r\n	<div class="section">\r\n		<div class="titlepage">\r\n			<div>\r\n				<div>\r\n					<h2 class="title">\r\n						<a name="expressions-features"></a>7.2&nbsp;Feature Overview\r\n					</h2>\r\n				</div>\r\n			</div>\r\n		</div>\r\n		<p>\r\n			The expression language supports the following functionality\r\n		</p>\r\n		<div class="itemizedlist">\r\n			<ul>\r\n				<li>\r\n					<p>\r\n						Literal expressions\r\n					</p>\r\n				</li>\r\n				<li>\r\n					<p>\r\n						Boolean and relational operators\r\n					</p>\r\n				</li>\r\n				<li>\r\n					<p>\r\n						Regular expressions\r\n					</p>\r\n				</li>\r\n				<li>\r\n					<p>\r\n						Class expressions\r\n					</p>\r\n				</li>\r\n				<li>\r\n					<p>\r\n						Accessing properties, arrays, lists, maps\r\n					</p>\r\n				</li>\r\n				<li>\r\n					<p>\r\n						Method invocation\r\n					</p>\r\n				</li>\r\n				<li>\r\n					<p>\r\n						Relational operators\r\n					</p>\r\n				</li>\r\n				<li>\r\n					<p>\r\n						Assignment\r\n					</p>\r\n				</li>\r\n				<li>\r\n					<p>\r\n						Calling constructors\r\n					</p>\r\n				</li>\r\n				<li>\r\n					<p>\r\n						Bean references\r\n					</p>\r\n				</li>\r\n				<li>\r\n					<p>\r\n						Array construction\r\n					</p>\r\n				</li>\r\n				<li>\r\n					<p>\r\n						Inline lists\r\n					</p>\r\n				</li>\r\n				<li>\r\n					<p>\r\n						Ternary operator\r\n					</p>\r\n				</li>\r\n				<li>\r\n					<p>\r\n						Variables\r\n					</p>\r\n				</li>\r\n				<li>\r\n					<p>\r\n						User defined functions\r\n					</p>\r\n				</li>\r\n				<li>\r\n					<p>\r\n						Collection projection\r\n					</p>\r\n				</li>\r\n				<li>\r\n					<p>\r\n						Collection selection\r\n					</p>\r\n				</li>\r\n				<li>\r\n					<p>\r\n						Templated expressions\r\n					</p>\r\n				</li>\r\n			</ul>\r\n		</div>\r\n	</div>\r\n	<div class="section">\r\n		<div class="titlepage">\r\n			<div>\r\n				<div>\r\n					<h2 class="title">\r\n						<a name="expressions-evaluation"></a>7.3&nbsp;Expression Evaluation using Spring\'s Expression Interface\r\n					</h2>\r\n				</div>\r\n			</div>\r\n		</div>\r\n		<p>\r\n			This section introduces the simple use of SpEL interfaces and its\r\n    expression language. The complete language reference can be found in the\r\n    section <a class="link" href="http://static.springsource.org/spring/docs/3.1.x/spring-framework-reference/html/expressions.html#expressions-language-ref">Language\r\n    Reference</a>.\r\n		</p>\r\n		<p>\r\n			The following code introduces the SpEL API to evaluate the literal\r\n    string expression \'Hello World\'.\r\n		</p>\r\n<pre class="programlisting">ExpressionParser parser = <span class="hl-keyword">new</span> SpelExpressionParser();\r\nExpression exp = parser.parseExpression(<span class="hl-string">"\'Hello World\'"</span>);\r\nString message = (String) exp.getValue();</pre>\r\n		<p>\r\n			The value of the\r\n    message variable is simply \'Hello World\'.\r\n		</p>\r\n		<p>\r\n			The SpEL classes and interfaces you are most likely to use are\r\n    located in the packages <span class="package">org.springframework.expression</span> and its sub packages and <span class="package">spel.support</span>.\r\n		</p>\r\n		<p>\r\n			The interfaceExpressionParseris\r\n    responsible for parsing an expression string. In this example the\r\n    expression string is a string literal denoted by the surrounding single\r\n    quotes. The interfaceExpressionis\r\n    responsible for evaluating the previously defined expression string. There\r\n    are two exceptions that can be thrown,ParseExceptionandEvaluationExceptionwhen calling\r\n    \'parser.parseExpression\' and\r\n    \'exp.getValue\' respectively.\r\n		</p>\r\n		<p>\r\n			SpEL supports a wide range of features, such as calling methods,\r\n    accessing properties, and calling constructors.\r\n		</p>\r\n		<p>\r\n			As an example of method invocation, we call the \'concat\' method on\r\n    the string literal.\r\n		</p>\r\n<pre class="programlisting">ExpressionParser parser = <span class="hl-keyword">new</span> SpelExpressionParser();\r\nExpression exp = parser.parseExpression(<span class="hl-string">"\'Hello World\'.concat(\'!\')"</span>);\r\nString message = (String) exp.getValue();</pre>\r\n		<p>\r\n			The value of message is now \'Hello World!\'.\r\n		</p>\r\n		<p>\r\n			As an example of calling a JavaBean property, the String property\r\n    \'Bytes\' can be called as shown below.\r\n		</p>\r\n<pre class="programlisting">ExpressionParser parser = <span class="hl-keyword">new</span> SpelExpressionParser(); <span class="hl-comment">// invokes \'getBytes()\'</span> Expression exp = parser.parseExpression(<span class="hl-string">"\'Hello World\'.bytes"</span>); <span class="hl-keyword">byte</span>[] bytes = (<span class="hl-keyword">byte</span>[]) exp.getValue();</pre>\r\n		<p>\r\n			SpEL also supports nested properties using standard \'dot\' notation,\r\n    i.e. prop1.prop2.prop3 and the setting of property values\r\n		</p>\r\n		<p>\r\n			Public fields may also be accessed.\r\n		</p>\r\n<pre class="programlisting">ExpressionParser parser = <span class="hl-keyword">new</span> SpelExpressionParser(); <span class="hl-comment">// invokes \'getBytes().length\'</span> Expression exp = parser.parseExpression(<span class="hl-string">"\'Hello World\'.bytes.length"</span>); <span class="hl-keyword">int</span> length = (Integer) exp.getValue();</pre>\r\n		<p>\r\n			The String\'s constructor can be called instead of using a string\r\n    literal.\r\n		</p>\r\n<pre class="programlisting">ExpressionParser parser = <span class="hl-keyword">new</span> SpelExpressionParser();\r\nExpression exp = parser.parseExpression(<span class="hl-string">"new String(\'hello world\').toUpperCase()"</span>);\r\nString message = exp.getValue(String.<span class="hl-keyword">class</span>);</pre>\r\n		<p>\r\n			Note the use of the generic methodpublic &lt;T&gt; T\r\n    getValue(Class&lt;T&gt; desiredResultType). Using this method\r\n    removes the need to cast the value of the expression to the desired result\r\n    type. AnEvaluationExceptionwill be thrown if the\r\n    value cannot be cast to the typeTor converted using\r\n    the registered type converter.\r\n		</p>\r\n		<p>\r\n			The more common usage of SpEL is to provide an expression string that\r\n    is evaluated against a specific object instance (called the root object). \r\n    There are two options here and which to choose depends on whether the object \r\n    against which the expression is being evaluated will be changing with each \r\n    call to evaluate the expression.  In the following example\r\n    we retrieve thenameproperty from an instance of the\r\n    Inventor class.\r\n		</p>\r\n<pre class="programlisting"><span class="hl-comment">// Create and set a calendar </span> GregorianCalendar c = <span class="hl-keyword">new</span> GregorianCalendar();\r\nc.set(1856, 7, 9); <span class="hl-comment">//  The constructor arguments are name, birthday, and nationality.</span> Inventor tesla = <span class="hl-keyword">new</span> Inventor(<span class="hl-string">"Nikola Tesla"</span>, c.getTime(), <span class="hl-string">"Serbian"</span>);\r\n\r\nExpressionParser parser = <span class="hl-keyword">new</span> SpelExpressionParser();\r\nExpression exp = parser.parseExpression(<span class="hl-string">"name"</span>);\r\nEvaluationContext context = <span class="hl-keyword">new</span> StandardEvaluationContext(tesla);\r\n\r\nString name = (String) exp.getValue(context);</pre>\r\n		<p>\r\n			In the last\r\n    line, the value of the string variable \'name\' will be set to "Nikola\r\n    Tesla". The class StandardEvaluationContext is where you can specify which\r\n    object the "name" property will be evaluated against.  This is the mechanism\r\n    to use if the root object is unlikely to change, it can simply be set once\r\n    in the evaluation context.  If the root object is likely to change\r\n    repeatedly, it can be supplied on each call togetValue, \r\n    as this next example shows:\r\n		</p>\r\n<pre class="programlisting">/ Create and set a calendar \r\nGregorianCalendar c = <span class="hl-keyword">new</span> GregorianCalendar();\r\nc.set(1856, 7, 9); <span class="hl-comment">//  The constructor arguments are name, birthday, and nationality.</span> Inventor tesla = <span class="hl-keyword">new</span> Inventor(<span class="hl-string">"Nikola Tesla"</span>, c.getTime(), <span class="hl-string">"Serbian"</span>);\r\n\r\nExpressionParser parser = <span class="hl-keyword">new</span> SpelExpressionParser();\r\nExpression exp = parser.parseExpression(<span class="hl-string">"name"</span>);\r\n\r\nString name = (String) exp.getValue(tesla);\r\n    </pre>\r\n		<p>\r\n			In this case the inventorteslahas been\r\n    supplied directly togetValueand the expression\r\n    evaluation infrastructure creates and manages a default evaluation context \r\n    internally - it did not require one to be supplied.\r\n		</p>\r\n		<p>\r\n			The StandardEvaluationContext is relatively expensive to construct and\r\n    during repeated usage it builds up cached state that enables subsequent\r\n    expression evaluations to be performed more quickly.  For this reason it is\r\n    better to cache and reuse them where possible, rather than construct a new \r\n    one for each expression evaluation.\r\n		</p>\r\n		<p>\r\n			In some cases it can be desirable to use a configured evaluation context and\r\n    yet still supply a different root object on each call togetValue.getValueallows both to be specified on the same call.\r\n    In these situations the root object passed on the call is considered to override\r\n    any (which maybe null) specified on the evaluation context.\r\n		</p>\r\n		<p>\r\n			<br />\r\n		</p>\r\n		<div class="note" style="margin-left:0.5in;">\r\n			<table class="ke-zeroborder" border="0">\r\n				<tbody>\r\n					<tr>\r\n						<td rowspan="2" align="center" valign="top" width="25">\r\n							<img alt="[Note]" src="http://static.springsource.org/spring/docs/3.1.x/spring-framework-reference/html/images/note.gif" />\r\n						</td>\r\n						<th align="left">\r\n							Note\r\n						</th>\r\n					</tr>\r\n					<tr>\r\n						<td align="left" valign="top">\r\n							<p>\r\n								In standalone usage of SpEL there is a need to create the parser,\r\n        parse expressions and perhaps provide evaluation contexts and a root\r\n        context object. However, more common usage\r\n        is to provide only the SpEL expression string as part of a\r\n        configuration file, for example for Spring bean or Spring Web Flow\r\n        definitions. In this case, the parser, evaluation context, root object\r\n        and any predefined variables are all set up implicitly, requiring\r\n        the user to specify nothing other than the expressions.\r\n							</p>\r\n						</td>\r\n					</tr>\r\n				</tbody>\r\n			</table>\r\n		</div>\r\n		<p>\r\n			As a final introductory example, the use of a boolean operator is\r\n    shown using the Inventor object in the previous example.\r\n		</p>\r\n<pre class="programlisting">Expression exp = parser.parseExpression(<span class="hl-string">"name == \'Nikola Tesla\'"</span>); <span class="hl-keyword">boolean</span> result = exp.getValue(context, Boolean.<span class="hl-keyword">class</span>); <span class="hl-comment">// evaluates to true</span></pre>\r\n		<div class="section">\r\n			<div class="titlepage">\r\n				<div>\r\n					<div>\r\n						<h3 class="title">\r\n							<a name="expressions-evaluation-context"></a>7.3.1&nbsp;The EvaluationContext interface\r\n						</h3>\r\n					</div>\r\n				</div>\r\n			</div>\r\n			<p>\r\n				The interfaceEvaluationContextis\r\n      used when evaluating an expression to resolve properties, methods,\r\n      fields, and to help perform type conversion. The out-of-the-box\r\n      implementation,StandardEvaluationContext, uses\r\n      reflection to manipulate the object, caching <span class="package">java.lang.reflect</span>\'sMethod,Field, andConstructorinstances for increased performance.\r\n			</p>\r\n			<p>\r\n				TheStandardEvaluationContextis where you\r\n      may specify the root object to evaluate against via the methodsetRootObject()or passing the root object into\r\n      the constructor. You can also specify variables and functions that\r\n      will be used in the expression using the methodssetVariable()andregisterFunction(). The use of variables and\r\n      functions are described in the language reference sections <a class="link" href="http://static.springsource.org/spring/docs/3.1.x/spring-framework-reference/html/expressions.html#expressions-ref-variables">Variables</a> and <a class="link" href="http://static.springsource.org/spring/docs/3.1.x/spring-framework-reference/html/expressions.html#expressions-ref-functions">Functions</a>. TheStandardEvaluationContextis also where you can\r\n      register customConstructorResolvers,MethodResolvers, andPropertyAccessors to extend how SpEL evaluates\r\n      expressions. Please refer to the JavaDoc of these classes for more\r\n      details.\r\n			</p>\r\n			<div class="section">\r\n				<div class="titlepage">\r\n					<div>\r\n						<div>\r\n							<h4 class="title">\r\n								<a name="expressions-type-conversion"></a>7.3.1.1&nbsp;Type Conversion\r\n							</h4>\r\n						</div>\r\n					</div>\r\n				</div>\r\n				<p>\r\n					By default SpEL uses the conversion service available in Spring\r\n        core\r\n        (org.springframework.core.convert.ConversionService).\r\n        This conversion service comes with many converters built in for common\r\n        conversions but is also fully extensible so custom conversions between\r\n        types can be added. Additionally it has the key capability that it is\r\n        generics aware. This means that when working with generic types in\r\n        expressions, SpEL will attempt conversions to maintain type\r\n        correctness for any objects it encounters.\r\n				</p>\r\n				<p>\r\n					What does this mean in practice? Suppose assignment, usingsetValue(), is being used to set aListproperty. The type of the property is actuallyList&lt;Boolean&gt;. SpEL will recognize that the\r\n        elements of the list need to be converted toBooleanbefore being placed in it. A simple\r\n        example:\r\n				</p>\r\n<pre class="programlisting"><span class="hl-keyword">class</span> Simple { <span class="hl-keyword">public</span> List&lt;Boolean&gt; booleanList = <span class="hl-keyword">new</span> ArrayList&lt;Boolean&gt;();\r\n}\r\n    	\r\nSimple simple = <span class="hl-keyword">new</span> Simple();\r\n\r\nsimple.booleanList.add(true);\r\n\r\nStandardEvaluationContext simpleContext = <span class="hl-keyword">new</span> StandardEvaluationContext(simple); <span class="hl-comment">// false is passed in here as a string.  SpEL and the conversion service will </span> <span class="hl-comment">// correctly recognize that it needs to be a Boolean and convert it</span> parser.parseExpression(<span class="hl-string">"booleanList[0]"</span>).setValue(simpleContext, <span class="hl-string">"false"</span>); <span class="hl-comment">// b will be false</span> Boolean b = simple.booleanList.get(0);\r\n        </pre>\r\n			</div>\r\n		</div>\r\n	</div>\r\n	<div class="section">\r\n		<div class="titlepage">\r\n			<div>\r\n				<div>\r\n					<h2 class="title">\r\n						<a name="expressions-beandef"></a>7.4&nbsp;Expression support for defining bean definitions\r\n					</h2>\r\n				</div>\r\n			</div>\r\n		</div>\r\n		<p>\r\n			SpEL expressions can be used with XML or annotation based\r\n    configuration metadata for defining BeanDefinitions. In both cases the\r\n    syntax to define the expression is of the form#{ &lt;expression\r\n    string&gt; }.\r\n		</p>\r\n		<div class="section">\r\n			<div class="titlepage">\r\n				<div>\r\n					<div>\r\n						<h3 class="title">\r\n							<a name="expressions-beandef-xml-based"></a>7.4.1&nbsp;XML based configuration\r\n						</h3>\r\n					</div>\r\n				</div>\r\n			</div>\r\n			<p>\r\n				A property or constructor-arg value can be set using expressions\r\n      as shown below\r\n			</p>\r\n<pre class="programlisting">&lt;<span class="hl-tag">bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"numberGuess"</span> <span class="hl-attribute">class</span>=<span class="hl-value">"org.spring.samples.NumberGuess"</span>&gt;\r\n    &lt;<span class="hl-tag">property</span> <span class="hl-attribute">name</span>=<span class="hl-value">"randomNumber"</span> <span class="hl-attribute">value</span>=<span class="hl-value">"#{ T(java.lang.Math).random() * 100.0 }"</span>/&gt;\r\n\r\n    &lt;<span class="hl-comment">!-- other properties --</span>&gt;\r\n&lt;<span class="hl-tag">/bean</span>&gt;</pre>\r\n			<p>\r\n				The variable \'systemProperties\' is predefined, so you can use it\r\n      in your expressions as shown below. Note that you do not have to prefix\r\n      the predefined variable with the \'#\' symbol in this context.\r\n			</p>\r\n<pre class="programlisting">&lt;<span class="hl-tag">bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"taxCalculator"</span> <span class="hl-attribute">class</span>=<span class="hl-value">"org.spring.samples.TaxCalculator"</span>&gt;\r\n    &lt;<span class="hl-tag">property</span> <span class="hl-attribute">name</span>=<span class="hl-value">"defaultLocale"</span> <span class="hl-attribute">value</span>=<span class="hl-value">"#{ systemProperties[\'user.region\'] }"</span>/&gt;\r\n\r\n    &lt;<span class="hl-comment">!-- other properties --</span>&gt;\r\n&lt;<span class="hl-tag">/bean</span>&gt;</pre>\r\n			<p>\r\n				You can also refer to other bean properties by name, for\r\n      example.\r\n			</p>\r\n<pre class="programlisting">&lt;<span class="hl-tag">bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"numberGuess"</span> <span class="hl-attribute">class</span>=<span class="hl-value">"org.spring.samples.NumberGuess"</span>&gt;\r\n    &lt;<span class="hl-tag">property</span> <span class="hl-attribute">name</span>=<span class="hl-value">"randomNumber"</span> <span class="hl-attribute">value</span>=<span class="hl-value">"#{ T(java.lang.Math).random() * 100.0 }"</span>/&gt;\r\n\r\n    &lt;<span class="hl-comment">!-- other properties --</span>&gt;\r\n&lt;<span class="hl-tag">/bean</span>&gt;\r\n\r\n\r\n&lt;<span class="hl-tag">bean</span> <span class="hl-attribute">id</span>=<span class="hl-value">"shapeGuess"</span> <span class="hl-attribute">class</span>=<span class="hl-value">"org.spring.samples.ShapeGuess"</span>&gt;\r\n    &lt;<span class="hl-tag">property</span> <span class="hl-attribute">name</span>=<span class="hl-value">"initialShapeSeed"</span> <span class="hl-attribute">value</span>=<span class="hl-value">"#{ numberGuess.randomNumber }"</span>/&gt;\r\n\r\n    &lt;<span class="hl-comment">!-- other properties --</span>&gt;\r\n&lt;<span class="hl-tag">/bean</span>&gt;</pre>\r\n		</div>\r\n		<div class="section">\r\n			<div class="titlepage">\r\n				<div>\r\n					<div>\r\n						<h3 class="title">\r\n							<a name="expressions-beandef-annotation-based"></a>7.4.2&nbsp;Annotation-based configuration\r\n						</h3>\r\n					</div>\r\n				</div>\r\n			</div>\r\n			<p>\r\n				The@Valueannotation can be placed on fields,\r\n      methods and method/constructor parameters to specify a default\r\n      value.\r\n			</p>\r\n			<p>\r\n				Here is an example to set the default value of a field\r\n      variable.\r\n			</p>\r\n<pre class="programlisting"><span class="hl-keyword">public</span> <span class="hl-keyword">static</span> <span class="hl-keyword">class</span> FieldValueTestBean\r\n\r\n  @Value(<span class="hl-string">"#{ systemProperties[\'user.region\'] }"</span>) <span class="hl-keyword">private</span> String defaultLocale; <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> setDefaultLocale(String defaultLocale)\r\n  { <span class="hl-keyword">this</span>.defaultLocale = defaultLocale;\r\n  } <span class="hl-keyword">public</span> String getDefaultLocale() \r\n  { <span class="hl-keyword">return</span> <span class="hl-keyword">this</span>.defaultLocale;\r\n  }\r\n\r\n}\r\n\r\n</pre>\r\n			<p>\r\n				The equivalent but on a property setter method is shown\r\n      below.\r\n			</p>\r\n<pre class="programlisting"><span class="hl-keyword">public</span> <span class="hl-keyword">static</span> <span class="hl-keyword">class</span> PropertyValueTestBean <span class="hl-keyword">private</span> String defaultLocale;\r\n\r\n  @Value(<span class="hl-string">"#{ systemProperties[\'user.region\'] }"</span>) <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> setDefaultLocale(String defaultLocale)\r\n  { <span class="hl-keyword">this</span>.defaultLocale = defaultLocale;\r\n  } <span class="hl-keyword">public</span> String getDefaultLocale() \r\n  { <span class="hl-keyword">return</span> <span class="hl-keyword">this</span>.defaultLocale;\r\n  }\r\n\r\n}</pre>\r\n			<p>\r\n				Autowired methods and constructors can also use the@Valueannotation.\r\n			</p>\r\n<pre class="programlisting"><span class="hl-keyword">public</span> <span class="hl-keyword">class</span> SimpleMovieLister { <span class="hl-keyword">private</span> MovieFinder movieFinder; <span class="hl-keyword">private</span> String defaultLocale;\r\n\r\n  @Autowired <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> configure(MovieFinder movieFinder, \r\n                        @Value(<span class="hl-string">"#{ systemProperties[\'user.region\'] }"</span>} String defaultLocale) { <span class="hl-keyword">this</span>.movieFinder = movieFinder; <span class="hl-keyword">this</span>.defaultLocale = defaultLocale;\r\n  } <span class="hl-comment">// ...</span> }</pre>\r\n<pre class="programlisting"><span class="hl-keyword">public</span> <span class="hl-keyword">class</span> MovieRecommender { <span class="hl-keyword">private</span> String defaultLocale; <span class="hl-keyword">private</span> CustomerPreferenceDao customerPreferenceDao;\r\n\r\n  @Autowired <span class="hl-keyword">public</span> MovieRecommender(CustomerPreferenceDao customerPreferenceDao,\r\n                          @Value(<span class="hl-string">"#{systemProperties[\'user.country\']}"</span>} String defaultLocale) { <span class="hl-keyword">this</span>.customerPreferenceDao = customerPreferenceDao; <span class="hl-keyword">this</span>.defaultLocale = defaultLocale;\r\n  } <span class="hl-comment">// ...</span> }</pre>\r\n		</div>\r\n	</div>\r\n	<div class="section">\r\n		<div class="titlepage">\r\n			<div>\r\n				<div>\r\n					<h2 class="title">\r\n						<a name="expressions-language-ref"></a>7.5&nbsp;Language Reference\r\n					</h2>\r\n				</div>\r\n			</div>\r\n		</div>\r\n		<div class="section">\r\n			<div class="titlepage">\r\n				<div>\r\n					<div>\r\n						<h3 class="title">\r\n							<a name="expressions-ref-literal"></a>7.5.1&nbsp;Literal expressions\r\n						</h3>\r\n					</div>\r\n				</div>\r\n			</div>\r\n			<p>\r\n				The types of literal expressions supported are strings, dates,\r\n      numeric values (int, real, and hex), boolean and null. Strings are\r\n      delimited by single quotes. To put a single quote itself in a string use\r\n      two single quote characters. The following listing shows simple usage of\r\n      literals. Typically they would not be used in isolation like this, but\r\n      as part of a more complex expression, for example using a literal on one\r\n      side of a logical comparison operator.\r\n			</p>\r\n<pre class="programlisting">ExpressionParser parser = <span class="hl-keyword">new</span> SpelExpressionParser(); <span class="hl-comment">// evals to "Hello World"</span> String helloWorld = (String) parser.parseExpression(<span class="hl-string">"\'Hello World\'"</span>).getValue(); <span class="hl-keyword">double</span> avogadrosNumber  = (Double) parser.parseExpression(<span class="hl-string">"6.0221415E+23"</span>).getValue(); <span class="hl-comment">// evals to 2147483647</span> <span class="hl-keyword">int</span> maxValue = (Integer) parser.parseExpression(<span class="hl-string">"0x7FFFFFFF"</span>).getValue(); <span class="hl-keyword">boolean</span> trueValue = (Boolean) parser.parseExpression(<span class="hl-string">"true"</span>).getValue();\r\n\r\nObject nullValue = parser.parseExpression(<span class="hl-string">"null"</span>).getValue();\r\n</pre>\r\n			<p>\r\n				Numbers support the use of the negative sign, exponential\r\n      notation, and decimal points. By default real numbers are parsed using\r\n      Double.parseDouble().\r\n			</p>\r\n		</div>\r\n		<div class="section">\r\n			<div class="titlepage">\r\n				<div>\r\n					<div>\r\n						<h3 class="title">\r\n							<a name="expressions-properties-arrays"></a>7.5.2&nbsp;Properties, Arrays, Lists, Maps, Indexers\r\n						</h3>\r\n					</div>\r\n				</div>\r\n			</div>\r\n			<p>\r\n				Navigating with property references is easy, just use a period to\r\n      indicate a nested property value. The instances of Inventor class, pupin\r\n      and tesla, were populated with data listed in the section <a class="link" href="http://static.springsource.org/spring/docs/3.1.x/spring-framework-reference/html/expressions.html#expressions-example-classes">Classes used in the\r\n      examples</a>. To navigate "down" and get Tesla\'s year of birth and\r\n      Pupin\'s city of birth the following expressions are used.\r\n			</p>\r\n<pre class="programlisting"><span class="hl-comment">// evals to 1856</span> <span class="hl-keyword">int</span> year = (Integer) parser.parseExpression(<span class="hl-string">"Birthdate.Year + 1900"</span>).getValue(context); \r\n\r\n\r\nString city = (String) parser.parseExpression(<span class="hl-string">"placeOfBirth.City"</span>).getValue(context);</pre>\r\n			<p>\r\n				Case insensitivity is allowed for the first letter of property\r\n      names. The contents of arrays and lists are obtained using square\r\n      bracket notation.\r\n			</p>\r\n<pre class="programlisting">ExpressionParser parser = <span class="hl-keyword">new</span> SpelExpressionParser(); <span class="hl-comment">// Inventions Array</span> StandardEvaluationContext teslaContext = <span class="hl-keyword">new</span> StandardEvaluationContext(tesla); <span class="hl-comment">// evaluates to "Induction motor"</span> String invention = parser.parseExpression(<span class="hl-string">"inventions[3]"</span>).getValue(teslaContext, \r\n                                                                    String.<span class="hl-keyword">class</span>); <span class="hl-comment">// Members List</span> StandardEvaluationContext societyContext = <span class="hl-keyword">new</span> StandardEvaluationContext(ieee); <span class="hl-comment">// evaluates to "Nikola Tesla"</span> String name = parser.parseExpression(<span class="hl-string">"Members[0].Name"</span>).getValue(societyContext, String.<span class="hl-keyword">class</span>); <span class="hl-comment">// List and Array navigation</span> <span class="hl-comment">// evaluates to "Wireless communication"</span> String invention = parser.parseExpression(<span class="hl-string">"Members[0].Inventions[6]"</span>).getValue(societyContext,\r\n                                                                               String.<span class="hl-keyword">class</span>);\r\n</pre>\r\n			<p>\r\n				The contents of maps are obtained by specifying the literal key\r\n      value within the brackets. In this case, because keys for the Officers\r\n      map are strings, we can specify string literals.\r\n			</p>\r\n<pre class="programlisting"><span class="hl-comment">// Officer\'s Dictionary</span> Inventor pupin = parser.parseExpression(<span class="hl-string">"Officers[\'president\']"</span>).getValue(societyContext, \r\n                                                                          Inventor.<span class="hl-keyword">class</span>); <span class="hl-comment">// evaluates to "Idvor"</span> String city = \r\n    parser.parseExpression(<span class="hl-string">"Officers[\'president\'].PlaceOfBirth.City"</span>).getValue(societyContext,\r\n                                                                               String.<span class="hl-keyword">class</span>); <span class="hl-comment">// setting values</span> parser.parseExpression(<span class="hl-string">"Officers[\'advisors\'][0].PlaceOfBirth.Country"</span>).setValue(societyContext, <span class="hl-string">"Croatia"</span>);\r\n\r\n</pre>\r\n		</div>\r\n		<div class="section">\r\n			<div class="titlepage">\r\n				<div>\r\n					<div>\r\n						<h3 class="title">\r\n							<a name="expressions-inline-lists"></a>7.5.3&nbsp;Inline lists\r\n						</h3>\r\n					</div>\r\n				</div>\r\n			</div>\r\n			<p>\r\n				Lists can be expressed directly in an expression using {} notation.\r\n			</p>\r\n<pre class="programlisting"><span class="hl-comment">// evaluates to a Java list containing the four numbers</span> List numbers = (List) parser.parseExpression(<span class="hl-string">"{1,2,3,4}"</span>).getValue(context); \r\n\r\nList listOfLists = (List) parser.parseExpression(<span class="hl-string">"{{\'a\',\'b\'},{\'x\',\'y\'}}"</span>).getValue(context); \r\n</pre>\r\n			<p>\r\n				{} by itself means an empty list.  For performance reasons, if the\r\n      list is itself entirely composed of fixed literals then a constant list is created\r\n      to represent the expression, rather than building a new list on each evaluation.\r\n			</p>\r\n		</div>\r\n		<div class="section">\r\n			<div class="titlepage">\r\n				<div>\r\n					<div>\r\n						<h3 class="title">\r\n							<a name="expressions-array-construction"></a>7.5.4&nbsp;Array construction\r\n						</h3>\r\n					</div>\r\n				</div>\r\n			</div>\r\n			<p>\r\n				Arrays can be built using the familiar Java syntax, optionally\r\n      supplying an initializer to have the array populated at construction time.\r\n			</p>\r\n<pre class="programlisting"><span class="hl-keyword">int</span>[] numbers1 = (<span class="hl-keyword">int</span>[]) parser.parseExpression(<span class="hl-string">"new int[4]"</span>).getValue(context); <span class="hl-comment">// Array with initializer</span> <span class="hl-keyword">int</span>[] numbers2 = (<span class="hl-keyword">int</span>[]) parser.parseExpression(<span class="hl-string">"new int[]{1,2,3}"</span>).getValue(context); <span class="hl-comment">// Multi dimensional array</span> <span class="hl-keyword">int</span>[][] numbers3 = (<span class="hl-keyword">int</span>[][]) parser.parseExpression(<span class="hl-string">"new int[4][5]"</span>).getValue(context); \r\n</pre>\r\n			<p>\r\n				It is not currently allowed to supply an initializer when constructing\r\n      a multi-dimensional array.\r\n			</p>\r\n		</div>\r\n		<div class="section">\r\n			<div class="titlepage">\r\n				<div>\r\n					<div>\r\n						<h3 class="title">\r\n							<a name="expressions-methods"></a>7.5.5&nbsp;Methods\r\n						</h3>\r\n					</div>\r\n				</div>\r\n			</div>\r\n			<p>\r\n				Methods are invoked using typical Java programming syntax. You may\r\n      also invoke methods on literals. Varargs are also supported.\r\n			</p>\r\n<pre class="programlisting"><span class="hl-comment">// string literal, evaluates to "bc"</span> String c = parser.parseExpression(<span class="hl-string">"\'abc\'.substring(2, 3)"</span>).getValue(String.<span class="hl-keyword">class</span>); <span class="hl-comment">// evaluates to true</span> <span class="hl-keyword">boolean</span> isMember = parser.parseExpression(<span class="hl-string">"isMember(\'Mihajlo Pupin\')"</span>).getValue(societyContext,\r\n                                                                                Boolean.<span class="hl-keyword">class</span>);</pre>\r\n		</div>\r\n		<div class="section">\r\n			<div class="titlepage">\r\n				<div>\r\n					<div>\r\n						<h3 class="title">\r\n							<a name="expressions-operators"></a>7.5.6&nbsp;Operators\r\n						</h3>\r\n					</div>\r\n				</div>\r\n			</div>\r\n			<div class="section">\r\n				<div class="titlepage">\r\n					<div>\r\n						<div>\r\n							<h4 class="title">\r\n								<a name="expressions-operators-relational"></a>7.5.6.1&nbsp;Relational operators\r\n							</h4>\r\n						</div>\r\n					</div>\r\n				</div>\r\n				<p>\r\n					The relational operators; equal, not equal, less than, less than\r\n        or equal, greater than, and greater than or equal are supported using\r\n        standard operator notation.\r\n				</p>\r\n<pre class="programlisting"><span class="hl-comment">// evaluates to true</span> <span class="hl-keyword">boolean</span> trueValue = parser.parseExpression(<span class="hl-string">"2 == 2"</span>).getValue(Boolean.<span class="hl-keyword">class</span>); <span class="hl-comment">// evaluates to false</span> <span class="hl-keyword">boolean</span> falseValue = parser.parseExpression(<span class="hl-string">"2 &lt; -5.0"</span>).getValue(Boolean.<span class="hl-keyword">class</span>); <span class="hl-comment">// evaluates to true</span> <span class="hl-keyword">boolean</span> trueValue = parser.parseExpression(<span class="hl-string">"\'black\' &lt; \'block\'"</span>).getValue(Boolean.<span class="hl-keyword">class</span>);</pre>\r\n				<p>\r\n					In addition to standard relational operators SpEL supports the\r\n        \'instanceof\' and regular expression based \'matches\' operator.\r\n				</p>\r\n<pre class="programlisting"><span class="hl-comment">// evaluates to false</span> <span class="hl-keyword">boolean</span> falseValue = parser.parseExpression(<span class="hl-string">"\'xyz\' instanceof T(int)"</span>).getValue(Boolean.<span class="hl-keyword">class</span>); <span class="hl-comment">// evaluates to true</span> <span class="hl-keyword">boolean</span> trueValue = \r\n     parser.parseExpression(<span class="hl-string">"\'5.00\' matches \'^-?\\\\d+(\\\\.\\\\d{2})?$\'"</span>).getValue(Boolean.<span class="hl-keyword">class</span>); <span class="hl-comment">//evaluates to false</span> <span class="hl-keyword">boolean</span> falseValue = \r\n     parser.parseExpression(<span class="hl-string">"\'5.0067\' matches \'^-?\\\\d+(\\\\.\\\\d{2})?$\'"</span>).getValue(Boolean.<span class="hl-keyword">class</span>);\r\n\r\n</pre>\r\n				<p>\r\n					Each symbolic operator can also be specified as a purely alphabetic equivalent.  This avoids\r\n      problems where the symbols used have special meaning for the document type in which \r\n      the expression is embedded (eg. an XML document).  The textual equivalents are shown\r\n      here: lt (\'&lt;\'), gt (\'&gt;\'), le (\'&lt;=\'), ge (\'&gt;=\'),\r\n      eq (\'==\'), ne (\'!=\'), div (\'/\'), mod (\'%\'), not (\'!\').\r\n      These are case insensitive.\r\n				</p>\r\n			</div>\r\n			<div class="section">\r\n				<div class="titlepage">\r\n					<div>\r\n						<div>\r\n							<h4 class="title">\r\n								<a name="expressions-operators-logical"></a>7.5.6.2&nbsp;Logical operators\r\n							</h4>\r\n						</div>\r\n					</div>\r\n				</div>\r\n				<p>\r\n					The logical operators that are supported are and, or, and not.\r\n        Their use is demonstrated below.\r\n				</p>\r\n<pre class="programlisting"><span class="hl-comment">// -- AND --</span> <span class="hl-comment">// evaluates to false</span> <span class="hl-keyword">boolean</span> falseValue = parser.parseExpression(<span class="hl-string">"true and false"</span>).getValue(Boolean.<span class="hl-keyword">class</span>); <span class="hl-comment">// evaluates to true</span> String expression = <span class="hl-string">"isMember(\'Nikola Tesla\') and isMember(\'Mihajlo Pupin\')"</span>; <span class="hl-keyword">boolean</span> trueValue = parser.parseExpression(expression).getValue(societyContext, Boolean.<span class="hl-keyword">class</span>); <span class="hl-comment">// -- OR --</span> <span class="hl-comment">// evaluates to true</span> <span class="hl-keyword">boolean</span> trueValue = parser.parseExpression(<span class="hl-string">"true or false"</span>).getValue(Boolean.<span class="hl-keyword">class</span>); <span class="hl-comment">// evaluates to true</span> String expression = <span class="hl-string">"isMember(\'Nikola Tesla\') or isMember(\'Albert Einstien\')"</span>; <span class="hl-keyword">boolean</span> trueValue = parser.parseExpression(expression).getValue(societyContext, Boolean.<span class="hl-keyword">class</span>); <span class="hl-comment">// -- NOT --</span> <span class="hl-comment">// evaluates to false</span> <span class="hl-keyword">boolean</span> falseValue = parser.parseExpression(<span class="hl-string">"!true"</span>).getValue(Boolean.<span class="hl-keyword">class</span>); <span class="hl-comment">// -- AND and NOT --</span> String expression = <span class="hl-string">"isMember(\'Nikola Tesla\') and !isMember(\'Mihajlo Pupin\')"</span>; <span class="hl-keyword">boolean</span> falseValue = parser.parseExpression(expression).getValue(societyContext, Boolean.<span class="hl-keyword">class</span>);</pre>\r\n			</div>\r\n			<div class="section">\r\n				<div class="titlepage">\r\n					<div>\r\n						<div>\r\n							<h4 class="title">\r\n								<a name="expressions-operators-mathematical"></a>7.5.6.3&nbsp;Mathematical operators\r\n							</h4>\r\n						</div>\r\n					</div>\r\n				</div>\r\n				<p>\r\n					The addition operator can be used on numbers, strings and dates.\r\n        Subtraction can be used on numbers and dates. Multiplication and\r\n        division can be used only on numbers. Other mathematical operators\r\n        supported are modulus (%) and exponential power (^). Standard operator\r\n        precedence is enforced. These operators are demonstrated below.\r\n				</p>\r\n<pre class="programlisting"><span class="hl-comment">// Addition</span> <span class="hl-keyword">int</span> two = parser.parseExpression(<span class="hl-string">"1 + 1"</span>).getValue(Integer.<span class="hl-keyword">class</span>); <span class="hl-comment">// 2</span> String testString = \r\n   parser.parseExpression(<span class="hl-string">"\'test\' + \' \' + \'string\'"</span>).getValue(String.<span class="hl-keyword">class</span>); <span class="hl-comment">// \'test string\'</span> <span class="hl-comment">// Subtraction</span> <span class="hl-keyword">int</span> four =  parser.parseExpression(<span class="hl-string">"1 - -3"</span>).getValue(Integer.<span class="hl-keyword">class</span>); <span class="hl-comment">// 4</span> <span class="hl-keyword">double</span> d = parser.parseExpression(<span class="hl-string">"1000.00 - 1e4"</span>).getValue(Double.<span class="hl-keyword">class</span>); <span class="hl-comment">// -9000</span> <span class="hl-comment">// Multiplication</span> <span class="hl-keyword">int</span> six =  parser.parseExpression(<span class="hl-string">"-2 * -3"</span>).getValue(Integer.<span class="hl-keyword">class</span>); <span class="hl-comment">// 6</span> <span class="hl-keyword">double</span> twentyFour = parser.parseExpression(<span class="hl-string">"2.0 * 3e0 * 4"</span>).getValue(Double.<span class="hl-keyword">class</span>); <span class="hl-comment">// 24.0</span> <span class="hl-comment">// Division</span> <span class="hl-keyword">int</span> minusTwo =  parser.parseExpression(<span class="hl-string">"6 / -3"</span>).getValue(Integer.<span class="hl-keyword">class</span>); <span class="hl-comment">// -2</span> <span class="hl-keyword">double</span> one = parser.parseExpression(<span class="hl-string">"8.0 / 4e0 / 2"</span>).getValue(Double.<span class="hl-keyword">class</span>); <span class="hl-comment">// 1.0</span> <span class="hl-comment">// Modulus</span> <span class="hl-keyword">int</span> three =  parser.parseExpression(<span class="hl-string">"7 % 4"</span>).getValue(Integer.<span class="hl-keyword">class</span>); <span class="hl-comment">// 3</span> <span class="hl-keyword">int</span> one = parser.parseExpression(<span class="hl-string">"8 / 5 % 2"</span>).getValue(Integer.<span class="hl-keyword">class</span>); <span class="hl-comment">// 1</span> <span class="hl-comment">// Operator precedence</span> <span class="hl-keyword">int</span> minusTwentyOne = parser.parseExpression(<span class="hl-string">"1+2-3*8"</span>).getValue(Integer.<span class="hl-keyword">class</span>); <span class="hl-comment">// -21</span> </pre>\r\n			</div>\r\n		</div>\r\n		<div class="section">\r\n			<div class="titlepage">\r\n				<div>\r\n					<div>\r\n						<h3 class="title">\r\n							<a name="expressions-assignment"></a>7.5.7&nbsp;Assignment\r\n						</h3>\r\n					</div>\r\n				</div>\r\n			</div>\r\n			<p>\r\n				Setting of a property is done by using the assignment operator.\r\n      This would typically be done within a call tosetValuebut can also be done inside a call togetValue.\r\n			</p>\r\n<pre class="programlisting">Inventor inventor = <span class="hl-keyword">new</span> Inventor();		\r\nStandardEvaluationContext inventorContext = <span class="hl-keyword">new</span> StandardEvaluationContext(inventor);\r\n\r\nparser.parseExpression(<span class="hl-string">"Name"</span>).setValue(inventorContext, <span class="hl-string">"Alexander Seovic2"</span>); <span class="hl-comment">// alternatively</span> String aleks = parser.parseExpression(<span class="hl-string">"Name = \'Alexandar Seovic\'"</span>).getValue(inventorContext, \r\n                                                                            String.<span class="hl-keyword">class</span>);\r\n</pre>\r\n		</div>\r\n		<div class="section">\r\n			<div class="titlepage">\r\n				<div>\r\n					<div>\r\n						<h3 class="title">\r\n							<a name="expressions-types"></a>7.5.8&nbsp;Types\r\n						</h3>\r\n					</div>\r\n				</div>\r\n			</div>\r\n			<p>\r\n				The special \'T\' operator can be used to specify an instance of\r\n      java.lang.Class (the \'type\'). Static methods are invoked using this\r\n      operator as well. TheStandardEvaluationContextuses aTypeLocatorto find types and theStandardTypeLocator(which can be replaced) is\r\n      built with an understanding of the java.lang package. This means T()\r\n      references to types within java.lang do not need to be fully qualified,\r\n      but all other type references must be.\r\n			</p>\r\n<pre class="programlisting">Class dateClass = parser.parseExpression(<span class="hl-string">"T(java.util.Date)"</span>).getValue(Class.<span class="hl-keyword">class</span>);\r\n\r\nClass stringClass = parser.parseExpression(<span class="hl-string">"T(String)"</span>).getValue(Class.<span class="hl-keyword">class</span>); <span class="hl-keyword">boolean</span> trueValue = \r\n   parser.parseExpression(<span class="hl-string">"T(java.math.RoundingMode).CEILING &lt; T(java.math.RoundingMode).FLOOR"</span>)\r\n  .getValue(Boolean.<span class="hl-keyword">class</span>);\r\n</pre>\r\n		</div>\r\n		<div class="section">\r\n			<div class="titlepage">\r\n				<div>\r\n					<div>\r\n						<h3 class="title">\r\n							<a name="expressions-constrcutors"></a>7.5.9&nbsp;Constructors\r\n						</h3>\r\n					</div>\r\n				</div>\r\n			</div>\r\n			<p>\r\n				Constructors can be invoked using the new operator. The fully\r\n      qualified class name should be used for all but the primitive type and\r\n      String (where int, float, etc, can be used).\r\n			</p>\r\n<pre class="programlisting">Inventor einstein = \r\n  p.parseExpression(<span class="hl-string">"new org.spring.samples.spel.inventor.Inventor(\'Albert Einstein\', \r\n                                                                   \'German\')"</span>)\r\n                                                                   .getValue(Inventor.<span class="hl-keyword">class</span>); <span class="hl-comment">//create new inventor instance within add method of List</span> p.parseExpression(<span class="hl-string">"Members.add(new org.spring.samples.spel.inventor.Inventor(\'Albert Einstein\',\r\n                                                                   \'German\'))"</span>)\r\n                                                                   .getValue(societyContext);\r\n</pre>\r\n		</div>\r\n		<div class="section">\r\n			<div class="titlepage">\r\n				<div>\r\n					<div>\r\n						<h3 class="title">\r\n							<a name="expressions-ref-variables"></a>7.5.10&nbsp;Variables\r\n						</h3>\r\n					</div>\r\n				</div>\r\n			</div>\r\n			<p>\r\n				Variables can be referenced in the expression using the syntax\r\n      #variableName. Variables are set using the method setVariable on the\r\n      StandardEvaluationContext.\r\n			</p>\r\n<pre class="programlisting">Inventor tesla = <span class="hl-keyword">new</span> Inventor(<span class="hl-string">"Nikola Tesla"</span>, <span class="hl-string">"Serbian"</span>);\r\nStandardEvaluationContext context = <span class="hl-keyword">new</span> StandardEvaluationContext(tesla);\r\ncontext.setVariable(<span class="hl-string">"newName"</span>, <span class="hl-string">"Mike Tesla"</span>);\r\n\r\nparser.parseExpression(<span class="hl-string">"Name = #newName"</span>).getValue(context);\r\n\r\nSystem.out.println(tesla.getName()) <span class="hl-comment">// "Mike Tesla"</span></pre>\r\n			<div class="section">\r\n				<div class="titlepage">\r\n					<div>\r\n						<div>\r\n							<h4 class="title">\r\n								<a name="expressions-this-root"></a>7.5.10.1&nbsp;The #this and #root variables\r\n							</h4>\r\n						</div>\r\n					</div>\r\n				</div>\r\n				<p>\r\n					The variable #this is always defined and refers to the current\r\n        evaluation object (against which unqualified references are resolved).\r\n        The variable #root is always defined and refers to the root\r\n        context object.  Although #this may vary as components of an expression\r\n        are evaluated, #root always refers to the root.\r\n				</p>\r\n<pre class="programlisting"><span class="hl-comment">// create an array of integers</span> List&lt;Integer&gt; primes = <span class="hl-keyword">new</span> ArrayList&lt;Integer&gt;();\r\nprimes.addAll(Arrays.asList(2,3,5,7,11,13,17)); <span class="hl-comment">// create parser and set variable \'primes\' as the array of integers</span> ExpressionParser parser = <span class="hl-keyword">new</span> SpelExpressionParser();\r\nStandardEvaluationContext context = <span class="hl-keyword">new</span> StandardEvaluationContext();\r\ncontext.setVariable(<span class="hl-string">"primes"</span>,primes); <span class="hl-comment">// all prime numbers &gt; 10 from the list (using selection ?{...})</span> <span class="hl-comment">// evaluates to [11, 13, 17]</span> List&lt;Integer&gt; primesGreaterThanTen = \r\n             (List&lt;Integer&gt;) parser.parseExpression(<span class="hl-string">"#primes.?[#this&gt;10]"</span>).getValue(context);\r\n\r\n</pre>\r\n			</div>\r\n		</div>\r\n		<div class="section">\r\n			<div class="titlepage">\r\n				<div>\r\n					<div>\r\n						<h3 class="title">\r\n							<a name="expressions-ref-functions"></a>7.5.11&nbsp;Functions\r\n						</h3>\r\n					</div>\r\n				</div>\r\n			</div>\r\n			<p>\r\n				You can extend SpEL by registering user defined functions that can\r\n      be called within the expression string. The function is registered with\r\n      theStandardEvaluationContextusing the\r\n      method.\r\n			</p>\r\n<pre class="programlisting"><span class="hl-keyword">public</span> <span class="hl-keyword">void</span> registerFunction(String name, Method m)</pre>\r\n			<p>\r\n				A reference to a Java Method provides the implementation of the\r\n      function. For example, a utility method to reverse a string is shown\r\n      below.\r\n			</p>\r\n<pre class="programlisting">public abstract class StringUtils {\r\n\r\n  public static String reverseString(String input) {\r\n    StringBuilder backwards = new StringBuilder();\r\n    for (int i = 0; i &lt; input.length(); i++) \r\n      backwards.append(input.charAt(input.length() - 1 - i));\r\n    }\r\n    return backwards.toString();\r\n  }\r\n}</pre>\r\n			<p>\r\n				This method is then registered with the evaluation context and can\r\n      be used within an expression string.\r\n			</p>\r\n<pre class="programlisting">ExpressionParser parser = <span class="hl-keyword">new</span> SpelExpressionParser();\r\nStandardEvaluationContext context = <span class="hl-keyword">new</span> StandardEvaluationContext();\r\n\r\ncontext.registerFunction(<span class="hl-string">"reverseString"</span>, \r\n                         StringUtils.<span class="hl-keyword">class</span>.getDeclaredMethod(<span class="hl-string">"reverseString"</span>, <span class="hl-keyword">new</span> Class[] { String.<span class="hl-keyword">class</span> }));\r\n\r\nString helloWorldReversed = \r\n          parser.parseExpression(<span class="hl-string">"#reverseString(\'hello\')"</span>).getValue(context, String.<span class="hl-keyword">class</span>);</pre>\r\n		</div>\r\n		<div class="section">\r\n			<div class="titlepage">\r\n				<div>\r\n					<div>\r\n						<h3 class="title">\r\n							<a name="expressions-bean-references"></a>7.5.12&nbsp;Bean references\r\n						</h3>\r\n					</div>\r\n				</div>\r\n			</div>\r\n			<p>\r\n				If the evaluation context has been configured with a bean resolver it is possible to\r\n    	lookup beans from an expression using the (@) symbol.\r\n			</p>\r\n<pre class="programlisting">ExpressionParser parser = <span class="hl-keyword">new</span> SpelExpressionParser();\r\nStandardEvaluationContext context = <span class="hl-keyword">new</span> StandardEvaluationContext();\r\ncontext.setBeanResolver(<span class="hl-keyword">new</span> MyBeanResolver()); <span class="hl-comment">// This will end up calling resolve(context,"foo") on MyBeanResolver during evaluation</span> Object bean = parser.parseExpression(<span class="hl-string">"@foo"</span>).getValue(context);</pre>\r\n		</div>\r\n		<div class="section">\r\n			<div class="titlepage">\r\n				<div>\r\n					<div>\r\n						<h3 class="title">\r\n							<a name="expressions-operator-ternary"></a>7.5.13&nbsp;Ternary Operator (If-Then-Else)\r\n						</h3>\r\n					</div>\r\n				</div>\r\n			</div>\r\n			<p>\r\n				You can use the ternary operator for performing if-then-else\r\n      conditional logic inside the expression. A minimal example is:\r\n			</p>\r\n<pre class="programlisting">String falseString = \r\n             parser.parseExpression(<span class="hl-string">"false ? \'trueExp\' : \'falseExp\'"</span>).getValue(String.<span class="hl-keyword">class</span>);</pre>\r\n			<p>\r\n				In this case, the boolean false results in returning the string\r\n      value \'falseExp\'. A more realistic example is shown below.\r\n			</p>\r\n<pre class="programlisting">parser.parseExpression(<span class="hl-string">"Name"</span>).setValue(societyContext, <span class="hl-string">"IEEE"</span>);\r\nsocietyContext.setVariable(<span class="hl-string">"queryName"</span>, <span class="hl-string">"Nikola Tesla"</span>);\r\n\r\nexpression = <span class="hl-string">"isMember(#queryName)? #queryName + \' is a member of the \' "</span> + <span class="hl-string">"+ Name + \' Society\' : #queryName + \' is not a member of the \' + Name + \' Society\'"</span>;\r\n\r\nString queryResultString = \r\n                    parser.parseExpression(expression).getValue(societyContext, String.<span class="hl-keyword">class</span>); <span class="hl-comment">// queryResultString = "Nikola Tesla is a member of the IEEE Society"</span></pre>\r\n			<p>\r\n				Also see the next section on the Elvis operator for an even\r\n      shorter syntax for the ternary operator.\r\n			</p>\r\n		</div>\r\n		<div class="section">\r\n			<div class="titlepage">\r\n				<div>\r\n					<div>\r\n						<h3 class="title">\r\n							<a name="expressions-operator-elvis"></a>7.5.14&nbsp;The Elvis Operator\r\n						</h3>\r\n					</div>\r\n				</div>\r\n			</div>\r\n			<p>\r\n				The Elvis operator is a shortening of the ternary operator syntax\r\n      and is used in the <a class="ulink" href="http://groovy.codehaus.org/Operators#Operators-ElvisOperator%28%3F%3A%29" target="_top">Groovy</a> language. With the ternary operator syntax you usually have to repeat a\r\n      variable twice, for example:\r\n			</p>\r\n<pre class="programlisting">String name = "Elvis Presley";\r\nString displayName = name != null ? name : "Unknown";</pre>\r\n			<p>\r\n				Instead you can use the Elvis operator, named for the resemblance\r\n      to Elvis\' hair style.\r\n			</p>\r\n<pre class="programlisting">ExpressionParser parser = <span class="hl-keyword">new</span> SpelExpressionParser();\r\n\r\nString name = parser.parseExpression(<span class="hl-string">"null?:\'Unknown\'"</span>).getValue(String.<span class="hl-keyword">class</span>);\r\n\r\nSystem.out.println(name); <span class="hl-comment">// \'Unknown\'</span> </pre>\r\n			<p>\r\n				Here is a more complex example.\r\n			</p>\r\n<pre class="programlisting">ExpressionParser parser = <span class="hl-keyword">new</span> SpelExpressionParser();\r\n\r\nInventor tesla = <span class="hl-keyword">new</span> Inventor(<span class="hl-string">"Nikola Tesla"</span>, <span class="hl-string">"Serbian"</span>);\r\nStandardEvaluationContext context = <span class="hl-keyword">new</span> StandardEvaluationContext(tesla);\r\n\r\nString name = parser.parseExpression(<span class="hl-string">"Name?:\'Elvis Presley\'"</span>).getValue(context, String.<span class="hl-keyword">class</span>);\r\n\r\nSystem.out.println(name); <span class="hl-comment">// Mike Tesla</span> tesla.setName(null);\r\n\r\nname = parser.parseExpression(<span class="hl-string">"Name?:\'Elvis Presley\'"</span>).getValue(context, String.<span class="hl-keyword">class</span>);\r\n\r\nSystem.out.println(name); <span class="hl-comment">// Elvis Presley</span></pre>\r\n		</div>\r\n		<div class="section">\r\n			<div class="titlepage">\r\n				<div>\r\n					<div>\r\n						<h3 class="title">\r\n							<a name="expressions-operator-safe-navigation"></a>7.5.15&nbsp;Safe Navigation operator\r\n						</h3>\r\n					</div>\r\n				</div>\r\n			</div>\r\n			<p>\r\n				The Safe Navigation operator is used to avoid aNullPointerExceptionand comes from the <a class="ulink" href="http://groovy.codehaus.org/Operators#Operators-SafeNavigationOperator%28%3F.%29" target="_top">Groovy</a> language. Typically when you have a reference to an object you might\r\n      need to verify that it is not null before accessing methods or\r\n      properties of the object. To avoid this, the safe navigation operator\r\n      will simply return null instead of throwing an exception.\r\n			</p>\r\n<pre class="programlisting">ExpressionParser parser = <span class="hl-keyword">new</span> SpelExpressionParser();\r\n\r\nInventor tesla = <span class="hl-keyword">new</span> Inventor(<span class="hl-string">"Nikola Tesla"</span>, <span class="hl-string">"Serbian"</span>);\r\ntesla.setPlaceOfBirth(<span class="hl-keyword">new</span> PlaceOfBirth(<span class="hl-string">"Smiljan"</span>));\r\n\r\nStandardEvaluationContext context = <span class="hl-keyword">new</span> StandardEvaluationContext(tesla);\r\n\r\nString city = parser.parseExpression(<span class="hl-string">"PlaceOfBirth?.City"</span>).getValue(context, String.<span class="hl-keyword">class</span>);\r\nSystem.out.println(city); <span class="hl-comment">// Smiljan</span> tesla.setPlaceOfBirth(null);\r\n\r\ncity = parser.parseExpression(<span class="hl-string">"PlaceOfBirth?.City"</span>).getValue(context, String.<span class="hl-keyword">class</span>);\r\n\r\nSystem.out.println(city); <span class="hl-comment">// null - does not throw NullPointerException!!!</span></pre>\r\n			<div class="note" style="margin-left:0.5in;">\r\n				<table class="ke-zeroborder" border="0">\r\n					<tbody>\r\n						<tr>\r\n							<td rowspan="2" align="center" valign="top" width="25">\r\n								<img alt="[Note]" src="http://static.springsource.org/spring/docs/3.1.x/spring-framework-reference/html/images/note.gif" />\r\n							</td>\r\n							<th align="left">\r\n								Note\r\n							</th>\r\n						</tr>\r\n						<tr>\r\n							<td align="left" valign="top">\r\n								<p>\r\n									The Elvis operator can be used to apply default values in\r\n        expressions, e.g. in an@Valueexpression:\r\n								</p>\r\n<pre class="programlisting">@Value("#{systemProperties[\'pop3.port\'] ?: 25}")</pre>\r\n								<p>\r\n									This will inject a system propertypop3.portif it\r\n        is defined or 25 if not.\r\n								</p>\r\n							</td>\r\n						</tr>\r\n					</tbody>\r\n				</table>\r\n			</div>\r\n		</div>\r\n		<div class="section">\r\n			<div class="titlepage">\r\n				<div>\r\n					<div>\r\n						<h3 class="title">\r\n							<a name="expressions-collection-selection"></a>7.5.16&nbsp;Collection Selection\r\n						</h3>\r\n					</div>\r\n				</div>\r\n			</div>\r\n			<p>\r\n				Selection is a powerful expression language feature that allows you\r\n      to transform some source collection into another by selecting from its\r\n      entries.\r\n			</p>\r\n			<p>\r\n				Selection uses the syntax?[selectionExpression]. This will filter the\r\n      collection and return a new collection containing a subset of the\r\n      original elements. For example, selection would allow us to easily get a\r\n      list of Serbian inventors:\r\n			</p>\r\n<pre class="programlisting">List&lt;Inventor&gt; list = (List&lt;Inventor&gt;) \r\n      parser.parseExpression(<span class="hl-string">"Members.?[Nationality == \'Serbian\']"</span>).getValue(societyContext);</pre>\r\n			<p>\r\n				Selection is possible upon both lists and maps. In the former case\r\n      the selection criteria is evaluated against each individual list element\r\n      whilst against a map the selection criteria is evaluated against each\r\n      map entry (objects of the Java typeMap.Entry). Map\r\n      entries have their key and value accessible as properties for use in the\r\n      selection.\r\n			</p>\r\n			<p>\r\n				This expression will return a new map consisting of those elements\r\n      of the original map where the entry value is less than 27.\r\n			</p>\r\n<pre class="programlisting">Map newMap = parser.parseExpression(<span class="hl-string">"map.?[value&lt;27]"</span>).getValue();</pre>\r\n			<p>\r\n				In addition to returning all the selected elements, it is possible\r\n      to retrieve just the first or the last value. To obtain the first entry\r\n      matching the selection the syntax is^[...]whilst to\r\n      obtain the last matching selection the syntax is$[...].\r\n			</p>\r\n		</div>\r\n		<div class="section">\r\n			<div class="titlepage">\r\n				<div>\r\n					<div>\r\n						<h3 class="title">\r\n							<a name="expressions-collection-projection"></a>7.5.17&nbsp;Collection Projection\r\n						</h3>\r\n					</div>\r\n				</div>\r\n			</div>\r\n			<p>\r\n				Projection allows a collection to drive the evaluation of a\r\n      sub-expression and the result is a new collection. The syntax for\r\n      projection is![projectionExpression]. Most easily\r\n      understood by example, suppose we have a list of inventors but want the\r\n      list of cities where they were born. Effectively we want to evaluate\r\n      \'placeOfBirth.city\' for every entry in the inventor list. Using\r\n      projection:\r\n			</p>\r\n<pre class="programlisting"><span class="hl-comment">// returns [ \'Smiljan\', \'Idvor\' ]</span> List placesOfBirth = (List)parser.parseExpression(<span class="hl-string">"Members.![placeOfBirth.city]"</span>);</pre>\r\n			<p>\r\n				A map can also be used to drive projection and in this case the\r\n      projection expression is evaluated against each entry in the map\r\n      (represented as a JavaMap.Entry). The result of a\r\n      projection across a map is a list consisting of the evaluation of the\r\n      projection expression against each map entry.\r\n			</p>\r\n		</div>\r\n		<div class="section">\r\n			<div class="titlepage">\r\n				<div>\r\n					<div>\r\n						<h3 class="title">\r\n							<a name="expressions-templating"></a>7.5.18&nbsp;Expression templating\r\n						</h3>\r\n					</div>\r\n				</div>\r\n			</div>\r\n			<p>\r\n				Expression templates allow a mixing of literal text with one or\r\n      more evaluation blocks. Each evaluation block is delimited with prefix\r\n      and suffix characters that you can define, a common choice is to use#{ }as the delimiters. For example,\r\n			</p>\r\n<pre class="programlisting">String randomPhrase = \r\n   parser.parseExpression(<span class="hl-string">"random number is #{T(java.lang.Math).random()}"</span>, <span class="hl-keyword">new</span> TemplateParserContext()).getValue(String.<span class="hl-keyword">class</span>); <span class="hl-comment">// evaluates to "random number is 0.7038186818312008"</span></pre>\r\n			<p>\r\n				The string is evaluated by concatenating the literal text \'random\r\n      number is \' with the result of evaluating the expression inside the #{ }\r\n      delimiter, in this case the result of calling that random() method. The\r\n      second argument to the methodparseExpression()is of\r\n      the typeParserContext. TheParserContextinterface is used to\r\n      influence how the expression is parsed in order to support the\r\n      expression templating functionality. The definition ofTemplateParserContextis shown below.\r\n			</p>\r\n<pre class="programlisting"><span class="hl-keyword">public</span> <span class="hl-keyword">class</span> TemplateParserContext <span class="hl-keyword">implements</span> ParserContext { <span class="hl-keyword">public</span> String getExpressionPrefix() { <span class="hl-keyword">return</span> <span class="hl-string">"#{"</span>;\r\n  } <span class="hl-keyword">public</span> String getExpressionSuffix() { <span class="hl-keyword">return</span> <span class="hl-string">"}"</span>;\r\n  } <span class="hl-keyword">public</span> <span class="hl-keyword">boolean</span> isTemplate() { <span class="hl-keyword">return</span> true;\r\n  }\r\n}</pre>\r\n		</div>\r\n	</div>\r\n	<div class="section">\r\n		<div class="titlepage">\r\n			<div>\r\n				<div>\r\n					<h2 class="title">\r\n						<a name="expressions-example-classes"></a>7.6&nbsp;Classes used in the examples\r\n					</h2>\r\n				</div>\r\n			</div>\r\n		</div>\r\n		<p>\r\n			Inventor.java\r\n		</p>\r\n<pre class="programlisting"><span class="hl-keyword">package</span> org.spring.samples.spel.inventor; <span class="hl-keyword">import</span> java.util.Date; <span class="hl-keyword">import</span> java.util.GregorianCalendar; <span class="hl-keyword">public</span> <span class="hl-keyword">class</span> Inventor { <span class="hl-keyword">private</span> String name; <span class="hl-keyword">private</span> String nationality; <span class="hl-keyword">private</span> String[] inventions; <span class="hl-keyword">private</span> Date birthdate; <span class="hl-keyword">private</span> PlaceOfBirth placeOfBirth; <span class="hl-keyword">public</span> Inventor(String name, String nationality)\r\n  {\r\n    GregorianCalendar c= <span class="hl-keyword">new</span> GregorianCalendar(); <span class="hl-keyword">this</span>.name = name; <span class="hl-keyword">this</span>.nationality = nationality; <span class="hl-keyword">this</span>.birthdate = c.getTime();\r\n  } <span class="hl-keyword">public</span> Inventor(String name, Date birthdate, String nationality) { <span class="hl-keyword">this</span>.name = name; <span class="hl-keyword">this</span>.nationality = nationality; <span class="hl-keyword">this</span>.birthdate = birthdate;\r\n  } <span class="hl-keyword">public</span> Inventor() {\r\n  } <span class="hl-keyword">public</span> String getName() { <span class="hl-keyword">return</span> name;\r\n  } <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> setName(String name) { <span class="hl-keyword">this</span>.name = name;\r\n  } <span class="hl-keyword">public</span> String getNationality() { <span class="hl-keyword">return</span> nationality;\r\n  } <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> setNationality(String nationality) { <span class="hl-keyword">this</span>.nationality = nationality;\r\n  } <span class="hl-keyword">public</span> Date getBirthdate() { <span class="hl-keyword">return</span> birthdate;\r\n  } <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> setBirthdate(Date birthdate) { <span class="hl-keyword">this</span>.birthdate = birthdate;\r\n  } <span class="hl-keyword">public</span> PlaceOfBirth getPlaceOfBirth() { <span class="hl-keyword">return</span> placeOfBirth;\r\n  } <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> setPlaceOfBirth(PlaceOfBirth placeOfBirth) { <span class="hl-keyword">this</span>.placeOfBirth = placeOfBirth;\r\n  } <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> setInventions(String[] inventions) { <span class="hl-keyword">this</span>.inventions = inventions;\r\n  } <span class="hl-keyword">public</span> String[] getInventions() { <span class="hl-keyword">return</span> inventions;\r\n  }       \r\n}\r\n</pre>\r\n		<p>\r\n			PlaceOfBirth.java\r\n		</p>\r\n<pre class="programlisting"><span class="hl-keyword">package</span> org.spring.samples.spel.inventor; <span class="hl-keyword">public</span> <span class="hl-keyword">class</span> PlaceOfBirth { <span class="hl-keyword">private</span> String city; <span class="hl-keyword">private</span> String country; <span class="hl-keyword">public</span> PlaceOfBirth(String city) { <span class="hl-keyword">this</span>.city=city;\r\n	} <span class="hl-keyword">public</span> PlaceOfBirth(String city, String country)\r\n	{ <span class="hl-keyword">this</span>(city); <span class="hl-keyword">this</span>.country = country;\r\n	} <span class="hl-keyword">public</span> String getCity() { <span class="hl-keyword">return</span> city;\r\n	} <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> setCity(String s) { <span class="hl-keyword">this</span>.city = s;\r\n	} <span class="hl-keyword">public</span> String getCountry() { <span class="hl-keyword">return</span> country;\r\n	} <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> setCountry(String country) { <span class="hl-keyword">this</span>.country = country;\r\n	}\r\n\r\n	\r\n	\r\n}\r\n</pre>\r\n		<p>\r\n			Society.java\r\n		</p>\r\n<pre class="programlisting"><span class="hl-keyword">package</span> org.spring.samples.spel.inventor; <span class="hl-keyword">import</span> java.util.*; <span class="hl-keyword">public</span> <span class="hl-keyword">class</span> Society { <span class="hl-keyword">private</span> String name; <span class="hl-keyword">public</span> <span class="hl-keyword">static</span> String Advisors = <span class="hl-string">"advisors"</span>; <span class="hl-keyword">public</span> <span class="hl-keyword">static</span> String President = <span class="hl-string">"president"</span>; <span class="hl-keyword">private</span> List&lt;Inventor&gt; members = <span class="hl-keyword">new</span> ArrayList&lt;Inventor&gt;(); <span class="hl-keyword">private</span> Map officers = <span class="hl-keyword">new</span> HashMap(); <span class="hl-keyword">public</span> List getMembers() { <span class="hl-keyword">return</span> members;\r\n	} <span class="hl-keyword">public</span> Map getOfficers() { <span class="hl-keyword">return</span> officers;\r\n	} <span class="hl-keyword">public</span> String getName() { <span class="hl-keyword">return</span> name;\r\n	} <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> setName(String name) { <span class="hl-keyword">this</span>.name = name;\r\n	} <span class="hl-keyword">public</span> <span class="hl-keyword">boolean</span> isMember(String name)\r\n	{ <span class="hl-keyword">boolean</span> found = false; <span class="hl-keyword">for</span> (Inventor inventor : members) { <span class="hl-keyword">if</span> (inventor.getName().equals(name))\r\n			{\r\n				found = true; <span class="hl-keyword">break</span>;\r\n			}\r\n		} <span class="hl-keyword">return</span> found;\r\n	}\r\n\r\n	\r\n}\r\n</pre>\r\n	</div>\r\n</div>\r\n<div class="navfooter">\r\n	<hr />\r\n	<table width="100%">\r\n		<tbody>\r\n			<tr>\r\n				<td align="left" width="40%">\r\n					<a href="http://static.springsource.org/spring/docs/3.1.x/spring-framework-reference/html/validation.html">Prev</a>&nbsp;\r\n				</td>\r\n				<td align="center" width="20%">\r\n					<a href="http://static.springsource.org/spring/docs/3.1.x/spring-framework-reference/html/spring-core.html">Up</a>\r\n				</td>\r\n				<td align="right" width="40%">\r\n					&nbsp;<a href="http://static.springsource.org/spring/docs/3.1.x/spring-framework-reference/html/aop.html">Next</a>\r\n				</td>\r\n			</tr>\r\n			<tr>\r\n				<td align="left" valign="top" width="40%">\r\n					6.&nbsp;Validation, Data Binding, and Type Conversion&nbsp;\r\n				</td>\r\n				<td align="center" width="20%">\r\n					<a href="http://static.springsource.org/spring/docs/3.1.x/spring-framework-reference/html/index.html">Home</a>\r\n				</td>\r\n				<td align="right" valign="top" width="40%">\r\n					&nbsp;8.&nbsp;Aspect Oriented Programming with Spring\r\n				</td>\r\n			</tr>\r\n		</tbody>\r\n	</table>\r\n</div>\r\n<div id="bodyEmptyFiller">\r\n	&nbsp;\r\n</div>\r\n<div id="searchBar">\r\n	<div id="collapseLink">\r\n		<a><img src="http://search.springsource.org/widget/images/ArrowLeft.png" border="0" /></a>\r\n	</div>\r\n	<div id="logoSpan">\r\n		<a target="_new" href="http://www.springsource.org?cid=70180000000wIe4AAE"><img src="http://search.springsource.org/widget/images/Logo_SpringSource_SearchBar.png" border="0" /></a>\r\n	</div>\r\n	<div id="subscribeLinkDiv">\r\n		<a target="_new" href="http://www.springsource.org/newsletter-subscription?cid=70180000000wIe4AAE"><span>NEWSLETTER SUBSCRIPTION</span></a>\r\n	</div>\r\n	<div id="searchFields">\r\n		<img title="Search Documentation" src="http://search.springsource.org/widget/images/Btn_Search.png" id="searchLens" /> \r\n	</div>\r\n</div>', '7.&nbsp;Spring Expression Language (SpEL)     Prev&nbsp;   Part&nbsp;III.&nbsp;Core Technologies   &nbsp;Next            7.&nbsp;Spring Expression Language (SpEL)          7.1&nbsp;Introduction    ...', '2013-01-12 21:44:54', NULL, 1),
	(5, '第四篇', '<h4 class="title">\r\n	6.7.4.3&nbsp;Configuring a JSR-303 Validator for use by Spring MVC\r\n</h4>\r\n<p>\r\n	With JSR-303, a singlejavax.validation.Validatorinstance typically validates <span class="emphasis"><em>all</em></span> model objects\r\n          that declare validation constraints. To configure a JSR-303-backed\r\n          Validator with Spring MVC, simply add a JSR-303 Provider, such as\r\n          Hibernate Validator, to your classpath. Spring MVC will detect it and\r\n          automatically enable JSR-303 support across all Controllers.\r\n</p>\r\n<p>\r\n	The Spring MVC configuration required to enable JSR-303 support\r\n          is shown below:\r\n</p>\r\n<pre class="programlisting">&lt;<span class="hl-tag">?xml version="1.0" encoding="UTF-8"?</span>&gt;\r\n&lt;<span class="hl-tag">beans</span> <span class="hl-attribute">xmlns</span>=<span class="hl-value">"http://www.springframework.org/schema/beans"</span> <span class="hl-attribute">xmlns:mvc</span>=<span class="hl-value">"http://www.springframework.org/schema/mvc"</span> <span class="hl-attribute">xmlns:xsi</span>=<span class="hl-value">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="hl-attribute">xsi:schemaLocation</span>=<span class="hl-value">"\r\n        http://www.springframework.org/schema/beans\r\n        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\r\n        http://www.springframework.org/schema/mvc\r\n        http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd"</span>&gt;\r\n\r\n    &lt;<span class="hl-comment">!-- JSR-303 support will be detected on classpath and enabled automatically --</span>&gt;\r\n    &lt;<span class="hl-tag">mvc:annotation-driven</span>/&gt;\r\n\r\n&lt;<span class="hl-tag">/beans</span>&gt;\r\n</pre>\r\n<p>\r\n	With this minimal configuration, anytime a @Valid @Controller\r\n          input is encountered, it will be validated by the JSR-303 provider.\r\n          JSR-303, in turn, will enforce any constraints declared against the\r\n          input. Any ConstraintViolations will automatically be exposed as\r\n          errors in the BindingResult renderable by standard Spring MVC form\r\n          tags.\r\n</p>', '6.7.4.3&nbsp;Configuring a JSR-303 Validator for use by Spring MVC   With JSR-303, a singlejavax.validation.Validatorinstance typically validates all model objects that declare validation constrain...', '2013-01-12 21:46:36', NULL, 1),
	(6, 'Part I. Overview of Spring Framework', '<p>\r\n	The Spring Framework is a lightweight solution and a potential\r\n      one-stop-shop for building your enterprise-ready applications. However,\r\n      Spring is modular, allowing you to use only those parts that you need,\r\n      without having to bring in the rest. You can use the IoC container, with\r\n      Struts on top, but you can also use only the <a class="link" href="http://static.springsource.org/spring/docs/3.1.x/spring-framework-reference/html/orm.html#orm-hibernate">Hibernate integration code</a> or the <a class="link" href="http://static.springsource.org/spring/docs/3.1.x/spring-framework-reference/html/jdbc.html#jdbc-introduction">JDBC abstraction layer</a>. The Spring\r\n      Framework supports declarative transaction management, remote access to\r\n      your logic through RMI or web services, and various options for\r\n      persisting your data. It offers a full-featured <a class="link" href="http://static.springsource.org/spring/docs/3.1.x/spring-framework-reference/html/mvc.html#mvc-introduction">MVC framework</a>, and enables you to\r\n      integrate <a class="link" href="http://static.springsource.org/spring/docs/3.1.x/spring-framework-reference/html/aop.html#aop-introduction">AOP</a> transparently into\r\n      your software.\r\n</p>\r\n<p>\r\n	Spring is designed to be non-intrusive, meaning that your domain\r\n      logic code generally has no dependencies on the framework itself. In\r\n      your integration layer (such as the data access layer), some\r\n      dependencies on the data access technology and the Spring libraries will\r\n      exist. However, it should be easy to isolate these dependencies from the\r\n      rest of your code base.\r\n</p>\r\n<p>\r\n	This document is a reference guide to Spring Framework features.\r\n      If you have any requests, comments, or questions on this document,\r\n      please post them on the user mailing list or on the support forums at <a class="ulink" href="http://forum.springsource.org/" target="_top">http://forum.springsource.org/</a>.\r\n</p>', 'The Spring Framework is a lightweight solution and a potential one-stop-shop for building your enterprise-ready applications. However, Spring is modular, allowing you to use only those parts that y...', '2013-01-12 21:53:51', NULL, 1),
	(7, '1.1 Dependency Injection and Inversion of Control', '<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;Java applications -- a loose term that runs the gamut from\r\n    constrained applets to n-tier server-side enterprise applications --\r\n    typically consist of objects that collaborate to form the application\r\n    proper. Thus the objects in an application have <span class="emphasis"><em>dependencies</em></span> on each other.\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;Although the Java platform provides a wealth of application\r\n    development functionality, it lacks the means to organize the basic\r\n    building blocks into a coherent whole, leaving that task to architects and\r\n    developers. True, you can use design patterns such as <em class="firstterm">Factory</em>, <em class="firstterm">Abstract Factory</em>, <em class="firstterm">Builder</em>, <em class="firstterm">Decorator</em>, and <em class="firstterm">Service Locator</em> to compose the various classes and\r\n    object instances that make up an application. However, these patterns are\r\n    simply that: best practices given a name, with a description of what the\r\n    pattern does, where to apply it, the problems it addresses, and so forth.\r\n    Patterns are formalized best practices that <span class="emphasis"><em>you must implement\r\n    yourself</em></span> in your application.\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;The Spring Framework <span class="emphasis"><em>Inversion of Control</em></span> (IoC)\r\n    component addresses this concern by providing a formalized means of\r\n    composing disparate components into a fully working application ready for\r\n    use. The\r\n    Spring Framework codifies formalized design patterns as first-class\r\n    objects that you can integrate into your own application(s). Numerous\r\n    organizations and institutions use the Spring Framework in this manner to\r\n    engineer robust, <span class="emphasis"><em>maintainable</em></span> applications.\r\n</p>', '&nbsp;&nbsp;&nbsp;&nbsp;Java applications -- a loose term that runs the gamut from constrained applets to n-tier server-side enterprise applications -- typically consist of objects that collaborate...', '2013-01-12 21:54:26', NULL, 1),
	(8, '1.2 Modules', '<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;The Spring Framework consists of features organized into about 20\r\n    modules. These modules are grouped into Core Container, Data\r\n    Access/Integration, Web, AOP (Aspect Oriented Programming),\r\n    Instrumentation, and Test, as shown in the following diagram.\r\n</p>\r\n<div class="mediaobject" align="center">\r\n	<img src="http://static.springsource.org/spring/docs/3.1.x/spring-framework-reference/html/images/spring-overview.png" align="middle" />\r\n	<div class="caption">\r\n		<p>\r\n			Overview of the Spring Framework\r\n		</p>\r\n	</div>\r\n</div>', '&nbsp;&nbsp;&nbsp;&nbsp;The Spring Framework consists of features organized into about 20 modules. These modules are grouped into Core Container, Data Access/Integration, Web, AOP (Aspect Oriented ...', '2013-01-12 21:55:05', NULL, 1),
	(9, '第八篇--应该翻页了', '<h1>\r\n	第八篇--应该翻页了第八篇--应该翻页了第八篇--应该翻页了第八篇--应该翻页了第八篇--应该翻页了第八篇--应该翻页了\r\n</h1>', '第八篇--应该翻页了第八篇--应该翻页了第八篇--应该翻页了第八篇--应该翻页了第八篇--应该翻页了第八篇--应该翻页了', '2013-01-12 22:00:58', NULL, 1);
/*!40000 ALTER TABLE `s7_blog` ENABLE KEYS */;


-- Dumping structure for table s7blog.s7_blog_category_relation
DROP TABLE IF EXISTS `s7_blog_category_relation`;
CREATE TABLE IF NOT EXISTS `s7_blog_category_relation` (
  `blogCategoryRelationId` int(16) NOT NULL AUTO_INCREMENT,
  `ctId` int(16) NOT NULL,
  `blogId` int(16) NOT NULL,
  PRIMARY KEY (`blogCategoryRelationId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- Dumping data for table s7blog.s7_blog_category_relation: ~0 rows (approximately)
DELETE FROM `s7_blog_category_relation`;
/*!40000 ALTER TABLE `s7_blog_category_relation` DISABLE KEYS */;
/*!40000 ALTER TABLE `s7_blog_category_relation` ENABLE KEYS */;


-- Dumping structure for table s7blog.s7_blog_params
DROP TABLE IF EXISTS `s7_blog_params`;
CREATE TABLE IF NOT EXISTS `s7_blog_params` (
  `blogParamId` int(16) NOT NULL AUTO_INCREMENT,
  `postIp` varchar(20) NOT NULL,
  `commentCount` int(16) NOT NULL,
  `blogId` int(16) NOT NULL,
  PRIMARY KEY (`blogParamId`)
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8;

-- Dumping data for table s7blog.s7_blog_params: ~8 rows (approximately)
DELETE FROM `s7_blog_params`;
/*!40000 ALTER TABLE `s7_blog_params` DISABLE KEYS */;
INSERT INTO `s7_blog_params` (`blogParamId`, `postIp`, `commentCount`, `blogId`) VALUES
	(1, '127.0.0.1', 0, 2),
	(2, '127.0.0.1', 0, 3),
	(3, '127.0.0.1', 0, 4),
	(4, '127.0.0.1', 0, 5),
	(5, '127.0.0.1', 0, 6),
	(6, '127.0.0.1', 0, 7),
	(7, '127.0.0.1', 0, 8),
	(8, '127.0.0.1', 0, 9);
/*!40000 ALTER TABLE `s7_blog_params` ENABLE KEYS */;


-- Dumping structure for table s7blog.s7_category
DROP TABLE IF EXISTS `s7_category`;
CREATE TABLE IF NOT EXISTS `s7_category` (
  `ctId` int(16) NOT NULL AUTO_INCREMENT,
  `ctName` varchar(20) NOT NULL,
  PRIMARY KEY (`ctId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- Dumping data for table s7blog.s7_category: ~0 rows (approximately)
DELETE FROM `s7_category`;
/*!40000 ALTER TABLE `s7_category` DISABLE KEYS */;
/*!40000 ALTER TABLE `s7_category` ENABLE KEYS */;


-- Dumping structure for table s7blog.s7_comment
DROP TABLE IF EXISTS `s7_comment`;
CREATE TABLE IF NOT EXISTS `s7_comment` (
  `cid` int(16) NOT NULL AUTO_INCREMENT,
  `guestName` varchar(20) DEFAULT NULL,
  `body` varchar(100) NOT NULL,
  `createTime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `belongTo` int(16) NOT NULL,
  PRIMARY KEY (`cid`)
) ENGINE=InnoDB AUTO_INCREMENT=19 DEFAULT CHARSET=utf8;

-- Dumping data for table s7blog.s7_comment: ~8 rows (approximately)
DELETE FROM `s7_comment`;
/*!40000 ALTER TABLE `s7_comment` DISABLE KEYS */;
INSERT INTO `s7_comment` (`cid`, `guestName`, `body`, `createTime`, `belongTo`) VALUES
	(11, '', '回复~~~~~~~~', '2013-01-12 21:33:39', 2),
	(12, '', '2222', '2013-01-12 21:33:44', 2),
	(13, '', '321', '2013-01-12 21:46:57', 5),
	(14, '', '321', '2013-01-12 21:47:59', 5),
	(15, '', 'aaa', '2013-01-12 21:55:33', 6),
	(16, '', '123', '2013-01-12 21:57:48', 2),
	(17, '', '123', '2013-01-12 21:59:53', 3),
	(18, '', 'aaa', '2013-01-12 22:00:08', 5);
/*!40000 ALTER TABLE `s7_comment` ENABLE KEYS */;


-- Dumping structure for table s7blog.s7_user
DROP TABLE IF EXISTS `s7_user`;
CREATE TABLE IF NOT EXISTS `s7_user` (
  `uid` int(16) NOT NULL AUTO_INCREMENT,
  `loginName` varchar(50) NOT NULL,
  `password` varchar(20) NOT NULL,
  `createTime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`uid`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;

-- Dumping data for table s7blog.s7_user: ~1 rows (approximately)
DELETE FROM `s7_user`;
/*!40000 ALTER TABLE `s7_user` DISABLE KEYS */;
INSERT INTO `s7_user` (`uid`, `loginName`, `password`, `createTime`) VALUES
	(1, 'sjc', 'sjc', '2012-12-28 10:24:55');
/*!40000 ALTER TABLE `s7_user` ENABLE KEYS */;
/*!40014 SET FOREIGN_KEY_CHECKS=1 */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;

